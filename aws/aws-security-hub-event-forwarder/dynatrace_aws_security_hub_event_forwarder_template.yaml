AWSTemplateFormatVersion: "2010-09-09"

Description: Template for Dynatrace AWS Security Hub Event Forwarder

Metadata:
  License:
    Description: |
      Copyright 2025 Dynatrace LLC

      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at

          https://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

Parameters:
  AwsSecretArn:
    Description: Arn of the created secret upfront.
    Type: String

  AwsSecretKeyName:
    Description: Name of the secret key.
    Default: "DYNATRACE_OPENPIPELINE_INGEST_API_TOKEN"
    Type: String

  DynatraceDomain:
    Description: Domain of your Dynatrace instance e.g. https://ab12345.live.dynatrace.com
    Type: String

  DynatraceOpenPipelineEndpointPath:
    Description: Path of the OpenPipeline security endpoint.
    Default: "/platform/ingest/v1/events.security"
    Type: String

Resources:
  DynatraceAwsSecurityHubEventForwarderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - "-"
          - - dynatrace-aws-security-hub-lambda-role
            - !Ref AWS::Region
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Path: /
      Policies:
        - PolicyName: "dynatrace-aws-security-hub-event-forwarder-read-dynatrace-secret-token"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource: !Ref AwsSecretArn
                Sid: "VisualEditor0"

  DynatraceAwsSecurityHubEventForwarderLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: dynatrace-aws-security-hub-event-forwarder-lambda
      Description: Dynatrace AWS security hub event forwarder lambda function.
      TracingConfig:
        Mode: "PassThrough"
      Runtime: python3.12
      Code:
        ZipFile: |
          import copy
          import http.client
          import json
          import os
          import uuid
          from urllib.parse import urlparse

          import boto3

          def lambda_handler(event, context):
              config = {
                  "AWS_SECRET_ARN": os.environ["AWS_SECRET_ARN"],
                  "AWS_SECRET_KEY_NAME": os.environ["AWS_SECRET_KEY_NAME"],
                  "DYNATRACE_DOMAIN": os.environ["DYNATRACE_DOMAIN"],
                  "DYNATRACE_OPENPIPELINE_SECURITY_ENDPOINT_PATH": os.environ["DYNATRACE_OPENPIPELINE_SECURITY_ENDPOINT_PATH"]
              }
              utils = Utils(config)
              aws = AwsSecurityHubProcessor(utils)
              aws.handler(event)


          class AwsSecurityHubProcessor():
              def __init__(self, util):
                  self.util = util

              def handler(self, event):
                  token = self.util.get_token_secret()
                  try:
                      detail_type = event.get("detail-type")
                      if detail_type == "Security Hub Findings - Imported":
                          finding_type = event.get("detail").get("findings")[0].get("Types")[0]
                          if finding_type.startswith("Software and Configuration Checks/Vulnerabilities/CVE"):
                              self.process_vulnerability(event, token)
                          elif finding_type.startswith("Software and Configuration Checks/Industry and Regulatory Standards"):
                              self.process_compliance(event, token)
                          elif finding_type.startswith("TTPs") or finding_type.startswith("Effects") or finding_type.startswith(
                                  finding_type, "Unusual Behaviors"):
                              self.process_detection(event, token)
                          # Fallback for generic/ unknown finding types.
                          else:
                              self.util.send_raw_finding(event, token)
                      else:
                          raise Exception(f'Unsupported detail-type: "{str(detail_type)}"')
                      return {
                          "statusCode": 200,
                          "body": json.dumps("Executed OpenPipeline security event export")
                      }
                  except Exception as e:
                      print(f'Error executing OpenPipeline security event export: {str(e)}')
                      return {
                          'statusCode': 500,
                          'body': 'Error executing OpenPipeline security event export'
                      }

              def process_vulnerability(self, event, token):
                  process_entries = []
                  for finding in event.get("detail").get("findings"):
                      for resource in finding.get("Resources"):
                          for vulnerability in finding.get("Vulnerabilities"):
                              for vulnerable_package in vulnerability.get("VulnerablePackages"):
                                  processed_entry = copy.deepcopy(event)
                                  tmp_vulnerability = copy.deepcopy(vulnerability)
                                  tmp_finding = copy.deepcopy(finding)
                                  tmp_resource = copy.deepcopy(resource)
                                  tmp_vulnerability["VulnerablePackages"] = [vulnerable_package]
                                  tmp_finding["Vulnerabilities"] = [tmp_vulnerability]
                                  tmp_finding["Resources"] = [tmp_resource]
                                  processed_entry["detail"]["findings"] = [tmp_finding]

                                  random_event_id = self.util.generate_uuid4()
                                  processed_entry["uuid"] = str(random_event_id)

                                  process_entries.append(processed_entry)

                  json_string = json.dumps(process_entries, default=str)
                  self.util.send_data_to_pipeline(json_string, token)

              def process_compliance(self, event, token):
                  process_entries = []

                  for finding in event.get("detail").get("findings"):
                      for resource in finding.get("Resources"):
                          processed_entry = copy.deepcopy(event)
                          tmp_finding = copy.deepcopy(finding)
                          tmp_finding["Resources"] = [resource]
                          processed_entry["detail"]["findings"] = [tmp_finding]

                          random_event_id = self.util.generate_uuid4()
                          processed_entry["uuid"] = str(random_event_id)

                          process_entries.append(processed_entry)

                  json_string = json.dumps(process_entries, default=str)
                  self.util.send_data_to_pipeline(json_string, token)

              def process_detection(self, event, token):
                  process_entries = []
                  for finding in event.get("detail").get("findings"):
                      for resource in finding.get("Resources"):
                          processed_entry = copy.deepcopy(event)
                          tmp_finding = copy.deepcopy(finding)
                          tmp_finding["Resources"] = [resource]
                          processed_entry["detail"]["findings"] = [tmp_finding]

                          random_event_id = self.util.generate_uuid4()
                          processed_entry["uuid"] = str(random_event_id)

                          process_entries.append(processed_entry)

                  json_string = json.dumps(process_entries, default=str)
                  self.util.send_data_to_pipeline(json_string, token)


          class Utils:
              def __init__(self, configuration):
                  self.config = configuration

              def send_raw_finding(self, event, token):
                  processed_event = copy.deepcopy(event)

                  random_event_id = self.generate_uuid4()
                  processed_event["uuid"] = str(random_event_id)

                  json_string = json.dumps(processed_event, default=str)
                  self.send_data_to_pipeline(json_string, token)

              def send_data_to_pipeline(self, data, token):
                  url = urlparse(self.config["DYNATRACE_DOMAIN"])
                  conn = http.client.HTTPSConnection(url.netloc)

                  headers = {
                      "Authorization": "Api-Token " + token,
                      "Content-Type": "application/json",
                  }

                  conn.request("POST", self.config["DYNATRACE_OPENPIPELINE_SECURITY_ENDPOINT_PATH"], body=data, headers=headers)
                  response = conn.getresponse()

                  if response.status > 299:
                      print(f"Error sending data to OpenPipeline, response status is: {str(response.status)}")

              def get_token_secret(self):
                  session = boto3.session.Session()
                  client = session.client(
                      service_name="secretsmanager"
                  )

                  get_secret_value_response = client.get_secret_value(
                      SecretId=self.config["AWS_SECRET_ARN"]
                  )

                  secret_json = get_secret_value_response["SecretString"]
                  secret_dict = json.loads(secret_json)

                  return secret_dict[self.config["AWS_SECRET_KEY_NAME"]]

              def generate_uuid4(self):
                  return uuid.uuid4()

      Handler: "index.lambda_handler"
      MemorySize: 128
      Timeout: 600
      Role: !GetAtt DynatraceAwsSecurityHubEventForwarderLambdaRole.Arn
      Environment:
        Variables:
          AWS_SECRET_ARN: !Ref AwsSecretArn
          AWS_SECRET_KEY_NAME: !Ref AwsSecretKeyName
          DYNATRACE_DOMAIN: !Ref DynatraceDomain
          DYNATRACE_OPENPIPELINE_SECURITY_ENDPOINT_PATH: !Ref DynatraceOpenPipelineEndpointPath

  DynatraceAwsSecurityHubFindingEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Forwards the security hub findings to the aws-security-hub-lambda function, which sends it to OpenPipeline"
      EventPattern:
        detail-type:
          - "Security Hub Findings - Imported"
        source:
          - "aws.securityhub"
      EventBusName: "default"
      Targets:
        - Arn: !GetAtt DynatraceAwsSecurityHubEventForwarderLambdaFunction.Arn
          Id: "TargetFunction"

  DynatraceAwsSecurityHubEventForwarderLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DynatraceAwsSecurityHubEventForwarderLambdaFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DynatraceAwsSecurityHubFindingEventRule.Arn
